

# 类变量：不加任何下划线，可以在外部被类直接访问   			如: name 
# 成员变量：单下划线_开头的变量，是在类里面的函数里面的变量 如：_name  只有类对象和子类对象可以访问.好像不对，这说的是类变量吧？不能尽信书
# 私有变量：以双下划线__开头的变量							如：__name  只有类对象可以访问，子类对象不能访问它

# self剖析：每个类里面的函数第一个参数都必须是self。一个对象的方法被调用时，
# 对象将自身作为第一个参数传给self。self就是对象的实例p
# -------------------------------------------------------------------

# 例1
class Person:		# 定义类时，一般把类名首字母大写
	name='jack'		#这里的name是类变量
p=Person()
p.name				# 直接执行这一句什么都没有。但是如果直接在命令行上执行的话就会出现'jack'了，但是这里是在.py文件里。
print(p.name)		#由于这里是直接访问类变量，所以需要使用print语句才能显示出'jack'。对于例2的是访问函数，所以不需要使用print语句
# -------------------------------------------------------------------

# 例2
class Person:
	def name(self):			# 每个类里面的函数第一个参数都必须是self。一个对象的方法被调用时，
							# 对象将自身作为第一个参数传给self。self就是对象的实例p
		self._name='jack'	# 单下划线表示成员变量
		print(self._name)
		print('self=',self)
		
	def name2(self,name2):	#每个类里面的函数第一个参数都必须是self。
		self._name=name2	# 单下划线表示成员变量
		print(self._name)
		print('self=',self)	#这一句与上一个print('self=',self)输出同样的内容。self指代对象的实例p
# print('Person()=',Person())		
p=Person()
print('p=',p)				#这一句与上两个个print('self=',self)输出同样的内容。self指代对象的实例p
p.name()			    	# 这里是访问函数，不需要使用print语句，因为函数里面有print()语句
p.name2('rose')
# -------------------------------------------------------------------


# 例3
# class Person:		
	# __name='jack'	# 双下划线表示私有变量，在类外面不能访问
# p=Person()
# print(p.__name)		#这里会出错，因为在类外面不能访问私有变量

# --------------------------------------------------------------------

# 例4
# 相对于例3，可以这么在外部访问私有变量，但是一般好像用不到这种方法

class Person:		
	__name='jack'	# 双下划线表示私有变量，在类外面不能访问
p=Person()
print(p._Person__name)		#在类外部使用 p._Person__name 即 "实例化对象._类名__私有变量"

# # --------------------------------------------------------------------

# # 例5
class Person:	
	def __init__(self,name):	#这里的__init__()是类的初始化函数。这里的name是形参，不是成员变量
		self._name=name			#这里的_name是成员变量，在类外部可以被该类访问
p=Person('Jack')
print(p._name)		