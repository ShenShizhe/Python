 
# 组合：想要把几个类组合在一起，但是直接继承这几个类就显得不伦不类，毕竟不是同一物种，这就需要用到组合了
# 组合：当没有继承关系的几个类，即横向关系的几个类，放在一起。  有纵向关系的几个类就使用继承。
 
class Turtle:
	def __init__(self,x):
		self.num=x
 
class Fish:
	def __init__(self,x):
		self.num=x
		
class Pool():						#因为水池不属于乌龟，也不属于鱼，就不能使用继承。下面的方法就是组合
	def __init__(self,x,y):
		self.turtle=Turtle(x)
		self.fish  =Fish(y)
	
	def print_num(self):
		print('水池里有%d只乌龟，%d小鱼！'%(self.turtle.num,self.fish.num))

pool=Pool(1,10)
pool.print_num()

# -----------------------------------------------------------------------------------------
# 类的属性可以不在类中定义，即属性可以在类外部直接赋值，因为python的变量不需要声明，之后就加到了类里面了。不适用于函数，只适用于属性
# 以下操作都在命令行下操作
# >>>class A:
	# def b(self):
		# print('你好！')
# >>>A.x=1	# 这里只是想说明一个问题，类的属性可以不在类中定义，即属性可以在类外部直接赋值，不必声明，之后就加到了类里面了
# >>>a=A()
# >>>a.x		#会输出1   把类实例化后也可以对实例对象进行额外定义属性，但这属性只在该实例中有效
# >>>a.y=2
# >>>a.y		#会输出2

# # -----------------------------------------------------------
# # 绑定：Python严格要求方法需要有实例才能被调用，这种限制其实就是Python所谓的绑定概念.绑定都跟self有关
# >>>class A:
	# def b():	#注意这里括号内没有self
		# print('你好！')
# >>>A.b()	#虽然这样也能调用，但是这种方法会出现以下问题
# >>>a=A()
# >>>a.b()	#这里会出错，因为定义b()时没有加self,所以实例调用不了方法b()

# >>>class A:
	# def b(self):
		# print('你好！')
# >>>a=A()
# >>>a.b()	#这里不会出错，这里实际上是a.b(a)，即把实例对象a传给了b()的第一个参数self